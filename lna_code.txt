// Copyright Timothy H. Keitt 2015
// See license for odeintr package

// [[Rcpp::depends(odeintr)]]


// [[Rcpp::plugins(cpp11)]]

// [[Rcpp::depends(BH)]]
#include "boost/numeric/odeint.hpp"
namespace odeint = boost::numeric::odeint;

// [[Rcpp::depends(RcppArmadillo)]]
#include <RcppArmadillo.h>
using namespace arma;;

namespace odeintr
{
  static const std::size_t N = 20;

  typedef std::vector<double> state_type;
  
  static state_type state(N);
  
  typedef odeint::bulirsch_stoer<state_type> stepper_type;
  
  static auto stepper = stepper_type();
  
  typedef std::vector<double> vec_type;
  static std::vector<vec_type> rec_x(N);
  static vec_type rec_t;
  
  std::array<double, 20> pars;

static arma::vec Z(4,arma::fill::zeros);
static arma::vec exp_Z(4,arma::fill::zeros);
static arma::vec exp_neg_Z(4,arma::fill::zeros);
static arma::vec exp_neg_2Z(4,arma::fill::zeros);
static arma::vec hazards(4,arma::fill::zeros);
static arma::mat jacobian(4,4,arma::fill::zeros);
static arma::mat diffusion(4,4,arma::fill::zeros);
static arma::vec diffusion_ode(16,arma::fill::zeros);;
  
  #include "utils.h"
  
  static void
  sys(const state_type x, state_type &dxdt, const double t)
  {
    odeintr::Z = arma::vec(x).subvec(0,3);
Z.elem(arma::find(Z<0)).zeros();
odeintr::exp_Z = arma::exp(odeintr::Z);
odeintr::exp_neg_Z = arma::exp(-odeintr::Z);
odeintr::exp_neg_2Z = arma::square(odeintr::exp_neg_Z);
odeintr::diffusion = arma::reshape(arma::vec(x).subvec(4,19),4,4);
odeintr::hazards[0] = (odeintr::exp_neg_Z[0]-0.5*odeintr::exp_neg_2Z[0])*((odeintr::pars[1]+odeintr::pars[0]*((odeintr::pars[10]+(odeintr::exp_Z[0]-1)-(odeintr::exp_Z[2]-1))+odeintr::pars[3]*(odeintr::pars[11]+(odeintr::exp_Z[1]-1)-(odeintr::exp_Z[3]-1))))*(odeintr::pars[8]-(odeintr::exp_Z[0]-1)));
odeintr::hazards[1] = (odeintr::exp_neg_Z[1]-0.5*odeintr::exp_neg_2Z[1])*(odeintr::pars[4]*(odeintr::pars[1]+odeintr::pars[0]*((odeintr::pars[10]+(odeintr::exp_Z[0]-1)-(odeintr::exp_Z[2]-1))+odeintr::pars[3]*(odeintr::pars[11]+(odeintr::exp_Z[1]-1)-(odeintr::exp_Z[3]-1))))*(odeintr::pars[9]-(odeintr::exp_Z[1]-1)));
odeintr::hazards[2] = (odeintr::exp_neg_Z[2]-0.5*odeintr::exp_neg_2Z[2])*((odeintr::pars[2])*(odeintr::pars[10]+(odeintr::exp_Z[0]-1)-(odeintr::exp_Z[2]-1)));
odeintr::hazards[3] = (odeintr::exp_neg_Z[3]-0.5*odeintr::exp_neg_2Z[3])*((odeintr::pars[5]*odeintr::pars[2])*(odeintr::pars[11]+(odeintr::exp_Z[1]-1)-(odeintr::exp_Z[3]-1)));
odeintr::jacobian(0, 0) = (odeintr::exp_neg_Z[0]-0.5*odeintr::exp_neg_2Z[0])*(odeintr::pars[0]*odeintr::exp_Z[0]*(odeintr::pars[8]-(odeintr::exp_Z[0]-1))-(odeintr::pars[1]+odeintr::pars[0]*((odeintr::pars[10]+(odeintr::exp_Z[0]-1)-(odeintr::exp_Z[2]-1))+odeintr::pars[3]*(odeintr::pars[11]+(odeintr::exp_Z[1]-1)-(odeintr::exp_Z[3]-1))))*odeintr::exp_Z[0])-(odeintr::exp_neg_Z[0]-0.5*(odeintr::exp_neg_2Z[0]*2))*((odeintr::pars[1]+odeintr::pars[0]*((odeintr::pars[10]+(odeintr::exp_Z[0]-1)-(odeintr::exp_Z[2]-1))+odeintr::pars[3]*(odeintr::pars[11]+(odeintr::exp_Z[1]-1)-(odeintr::exp_Z[3]-1))))*(odeintr::pars[8]-(odeintr::exp_Z[0]-1)));
odeintr::jacobian(0, 1) = (odeintr::exp_neg_Z[0]-0.5*odeintr::exp_neg_2Z[0])*(odeintr::pars[0]*(odeintr::pars[3]*odeintr::exp_Z[1])*(odeintr::pars[8]-(odeintr::exp_Z[0]-1)));
odeintr::jacobian(0, 2) = -((odeintr::exp_neg_Z[0]-0.5*odeintr::exp_neg_2Z[0])*(odeintr::pars[0]*odeintr::exp_Z[2]*(odeintr::pars[8]-(odeintr::exp_Z[0]-1))));
odeintr::jacobian(0, 3) = -((odeintr::exp_neg_Z[0]-0.5*odeintr::exp_neg_2Z[0])*(odeintr::pars[0]*(odeintr::pars[3]*odeintr::exp_Z[3])*(odeintr::pars[8]-(odeintr::exp_Z[0]-1))));
odeintr::jacobian(1, 0) = (odeintr::exp_neg_Z[1]-0.5*odeintr::exp_neg_2Z[1])*(odeintr::pars[4]*(odeintr::pars[0]*odeintr::exp_Z[0])*(odeintr::pars[9]-(odeintr::exp_Z[1]-1)));
odeintr::jacobian(1, 1) = (odeintr::exp_neg_Z[1]-0.5*odeintr::exp_neg_2Z[1])*(odeintr::pars[4]*(odeintr::pars[0]*(odeintr::pars[3]*odeintr::exp_Z[1]))*(odeintr::pars[9]-(odeintr::exp_Z[1]-1))-odeintr::pars[4]*(odeintr::pars[1]+odeintr::pars[0]*((odeintr::pars[10]+(odeintr::exp_Z[0]-1)-(odeintr::exp_Z[2]-1))+odeintr::pars[3]*(odeintr::pars[11]+(odeintr::exp_Z[1]-1)-(odeintr::exp_Z[3]-1))))*odeintr::exp_Z[1])-(odeintr::exp_neg_Z[1]-0.5*(odeintr::exp_neg_2Z[1]*2))*(odeintr::pars[4]*(odeintr::pars[1]+odeintr::pars[0]*((odeintr::pars[10]+(odeintr::exp_Z[0]-1)-(odeintr::exp_Z[2]-1))+odeintr::pars[3]*(odeintr::pars[11]+(odeintr::exp_Z[1]-1)-(odeintr::exp_Z[3]-1))))*(odeintr::pars[9]-(odeintr::exp_Z[1]-1)));
odeintr::jacobian(1, 2) = -((odeintr::exp_neg_Z[1]-0.5*odeintr::exp_neg_2Z[1])*(odeintr::pars[4]*(odeintr::pars[0]*odeintr::exp_Z[2])*(odeintr::pars[9]-(odeintr::exp_Z[1]-1))));
odeintr::jacobian(1, 3) = -((odeintr::exp_neg_Z[1]-0.5*odeintr::exp_neg_2Z[1])*(odeintr::pars[4]*(odeintr::pars[0]*(odeintr::pars[3]*odeintr::exp_Z[3]))*(odeintr::pars[9]-(odeintr::exp_Z[1]-1))));
odeintr::jacobian(2, 0) = (odeintr::exp_neg_Z[2]-0.5*odeintr::exp_neg_2Z[2])*((odeintr::pars[2])*odeintr::exp_Z[0]);
odeintr::jacobian(2, 2) = -((odeintr::exp_neg_Z[2]-0.5*odeintr::exp_neg_2Z[2])*((odeintr::pars[2])*odeintr::exp_Z[2])+(odeintr::exp_neg_Z[2]-0.5*(odeintr::exp_neg_2Z[2]*2))*((odeintr::pars[2])*(odeintr::pars[10]+(odeintr::exp_Z[0]-1)-(odeintr::exp_Z[2]-1))));
odeintr::jacobian(3, 1) = (odeintr::exp_neg_Z[3]-0.5*odeintr::exp_neg_2Z[3])*((odeintr::pars[5]*odeintr::pars[2])*odeintr::exp_Z[1]);
odeintr::jacobian(3, 3) = -((odeintr::exp_neg_Z[3]-0.5*odeintr::exp_neg_2Z[3])*((odeintr::pars[5]*odeintr::pars[2])*odeintr::exp_Z[3])+(odeintr::exp_neg_Z[3]-0.5*(odeintr::exp_neg_2Z[3]*2))*((odeintr::pars[5]*odeintr::pars[2])*(odeintr::pars[11]+(odeintr::exp_Z[1]-1)-(odeintr::exp_Z[3]-1))));
odeintr::diffusion_ode = arma::vectorise(odeintr::diffusion * odeintr::jacobian.t() + arma::diagmat(odeintr::exp_neg_2Z % odeintr::hazards) + odeintr::jacobian * odeintr::diffusion, 0);
dxdt[0] = odeintr::hazards[0];
dxdt[1] = odeintr::hazards[1];
dxdt[2] = odeintr::hazards[2];
dxdt[3] = odeintr::hazards[3];
dxdt[4] = odeintr::diffusion_ode[0];
dxdt[5] = odeintr::diffusion_ode[1];
dxdt[6] = odeintr::diffusion_ode[2];
dxdt[7] = odeintr::diffusion_ode[3];
dxdt[8] = odeintr::diffusion_ode[4];
dxdt[9] = odeintr::diffusion_ode[5];
dxdt[10] = odeintr::diffusion_ode[6];
dxdt[11] = odeintr::diffusion_ode[7];
dxdt[12] = odeintr::diffusion_ode[8];
dxdt[13] = odeintr::diffusion_ode[9];
dxdt[14] = odeintr::diffusion_ode[10];
dxdt[15] = odeintr::diffusion_ode[11];
dxdt[16] = odeintr::diffusion_ode[12];
dxdt[17] = odeintr::diffusion_ode[13];
dxdt[18] = odeintr::diffusion_ode[14];
dxdt[19] = odeintr::diffusion_ode[15];;
  }

  static void
  obs(const state_type x, const double t)
  {
    for (int i = 0; i != N; ++i)
      rec_x[i].push_back(x[i]);
    rec_t.push_back(t);
  }
  
}; // namespace odeintr

static void
reserve(odeintr::vec_type::size_type n)
{
  odeintr::rec_t.reserve(n);
  for (auto &i : odeintr::rec_x) i.reserve(n);
}

// [[Rcpp::export]]
Rcpp::List INTEGRATE_LNA_get_output()
{
  Rcpp::List out;
  out("Time") = Rcpp::wrap(odeintr::rec_t);
  for (int i = 0; i != odeintr::N; ++i)
  {
    auto cnam = std::string("X") + std::to_string(i + 1);
    out(cnam) = Rcpp::wrap(odeintr::rec_x[i]);
  }
  out.attr("class") = "data.frame";
  int rows_out = odeintr::rec_t.size();
  auto rn = Rcpp::IntegerVector::create(NA_INTEGER, -rows_out);
  out.attr("row.names") = rn;
  return out;
};

// [[Rcpp::export]]
void INTEGRATE_LNA_set_state(Rcpp::NumericVector new_state)
{
  if (new_state.size() != odeintr::N)
    Rcpp::stop("Invalid initial state");
  std::copy(new_state.begin(),
            new_state.end(),
            odeintr::state.begin());
}

// [[Rcpp::export]]
std::vector<double>
INTEGRATE_LNA_get_state()
{
  return odeintr::state;
}

// [[Rcpp::export]]
void INTEGRATE_LNA_reset_observer()
{
  for (auto &i : odeintr::rec_x) i.resize(0);
  odeintr::rec_t.resize(0);  
}

// [[Rcpp::export]]
Rcpp::List INTEGRATE_LNA_adap(Rcpp::NumericVector init,
                             double duration,
                             double step_size = 1.0,
                             double start = 0.0)
{
  INTEGRATE_LNA_set_state(init);
  INTEGRATE_LNA_reset_observer(); reserve(duration / step_size);
  odeint::integrate_adaptive(odeintr::stepper, odeintr::sys, odeintr::state,
                             start, start + duration, step_size,
                             odeintr::obs);
  return INTEGRATE_LNA_get_output();
}

// [[Rcpp::export]]
Rcpp::List INTEGRATE_LNA_at(Rcpp::NumericVector init,
                           std::vector<double> times,
                           double step_size = 1.0,
                           double start = 0.0)
{
  INTEGRATE_LNA_set_state(init);
  INTEGRATE_LNA_reset_observer(); reserve(times.size());
  odeint::integrate_const(odeintr::stepper, odeintr::sys, odeintr::state,
                          start, times[0], step_size);
  odeint::integrate_times(odeintr::stepper, odeintr::sys, odeintr::state,
                          times.begin(), times.end(), step_size, odeintr::obs);
  return INTEGRATE_LNA_get_output();
}

// [[Rcpp::export]]
Rcpp::List
INTEGRATE_LNA_continue_at(std::vector<double> times, double step_size = 1.0)
{
  double start = odeintr::rec_t.back();
  INTEGRATE_LNA_reset_observer(); reserve(odeintr::rec_t.size() + times.size());
  odeint::integrate_const(odeintr::stepper, odeintr::sys, odeintr::state,
                          start, times[0], step_size);
  odeint::integrate_times(odeintr::stepper, odeintr::sys, odeintr::state,
                          times.begin(), times.end(), step_size, odeintr::obs);
  return INTEGRATE_LNA_get_output();
}

// [[Rcpp::export]]
Rcpp::List INTEGRATE_LNA(Rcpp::NumericVector init,
                       double duration,
                       double step_size = 1.0,
                       double start = 0.0)
{
  INTEGRATE_LNA_set_state(init);
  INTEGRATE_LNA_reset_observer(); reserve(duration / step_size);
  odeint::integrate_const(odeintr::stepper, odeintr::sys, odeintr::state,
                          start, start + duration, step_size,
                          odeintr::obs);
  return INTEGRATE_LNA_get_output();
}

// [[Rcpp::export]]
std::vector<double>
INTEGRATE_LNA_no_record(Rcpp::NumericVector init,
                       double duration,
                       double step_size = 1.0,
                       double start = 0.0)
{
  INTEGRATE_LNA_set_state(init);
  odeint::integrate_adaptive(odeintr::stepper, odeintr::sys, odeintr::state,
                             start, start + duration, step_size);
  return INTEGRATE_LNA_get_state();
}

// [[Rcpp::export]]
void INTEGRATE_LNA_set_params(std::vector<double> p)
{
  if (p.size() != odeintr::pars.size())
    Rcpp::stop("Invalid parameter vector");
  std::copy(p.begin(), p.end(), odeintr::pars.begin());
}
// [[Rcpp::export]]
std::vector<double> INTEGRATE_LNA_get_params()
{
  return std::vector<double>(odeintr::pars.begin(), odeintr::pars.end());
}
;




void INTEGRATE_STEM_LNA(Rcpp::NumericVector& init, double start, double end, double step_size = 0.001) {
std::copy(init.begin(), init.end(), odeintr::state.begin());
odeint::integrate_adaptive(odeintr::stepper, odeintr::sys, odeintr::state, start, end, step_size);
std::copy(odeintr::state.begin(), odeintr::state.end(), init.begin());
}

typedef void(*lna_ptr)(Rcpp::NumericVector& init, double start, double end, double step_size);
// [[Rcpp::export]]
Rcpp::XPtr<lna_ptr> LNA_XPtr() {
return(Rcpp::XPtr<lna_ptr>(new lna_ptr(&INTEGRATE_STEM_LNA)));
}
 
void SET_LNA_PARAMS(Rcpp::NumericVector& p) {
std::copy(p.begin(), p.end(), odeintr::pars.begin());
}

typedef void(*set_pars_ptr)(Rcpp::NumericVector& p);
// [[Rcpp::export]]
Rcpp::XPtr<set_pars_ptr> LNA_set_params_XPtr() {
return(Rcpp::XPtr<set_pars_ptr>(new set_pars_ptr(&SET_LNA_PARAMS)));
}